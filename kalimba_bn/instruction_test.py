kalimba_maxim_instructions_test = [
    (bytes.fromhex('00c012ad'), 'rMAC = rMAC + r0 * -0.5 (SS);'),
    (bytes.fromhex('00c012a5'), 'rMAC = rMAC + r0 * -0.5 (US);'),
    (bytes.fromhex('00c000fd000012ad'), 'rMAC = rMAC + r0 * -0.5 (SS);'),
    (bytes.fromhex('00c000fd000012a5'), 'rMAC = rMAC + r0 * -0.5 (US);'),
    (bytes.fromhex('341200fd7856f0dd'), 'jump 305419896;'),
    (bytes.fromhex('341200fd7856f0e1'), 'call 305419896;'),
    (bytes.fromhex('341200fd7956f0e1'), 'call (m) 305419896;'),
    (bytes.fromhex('341200fd7956f0dd'), 'jump (m) 305419896;'),
    (bytes.fromhex('341200fd7856edd1'), 'rFlags = M[rLink + 305419896];'),
    (bytes.fromhex('341200fd7856edd5'), 'M[rLink + 305419896] = rFlags;'),
    (bytes.fromhex('341200fd78563ff1'), 'push r1 + 305419896;'),
    (bytes.fromhex('341200fd78563581'), 'r1 = r3 AND 305419896;'),
    (bytes.fromhex('341200fd7856359d'), 'r1 = r3 * 305419896 (int) (sat);'),
    (bytes.fromhex('341200fd78563599'), 'r1 = r3 * 305419896 (int);'),
    (bytes.fromhex('341200fd78563595'), 'r1 = r3 * 0.1422222219407558441162109375 (frac);'),
    (bytes.fromhex('8a4602fd782632f5'), 'r1 = MBU[r0 + 305419896];'),
    (bytes.fromhex('341200fd78563501'), 'r1 = r3 + 305419896;'),
    (bytes.fromhex('341200fd78563521'), 'r1 = r3 - 305419896;'),
    (bytes.fromhex('341200fd78568551'), 'M0 = r3 + 305419896;'),
    (bytes.fromhex('341200fd78568571'), 'M0 = r3 - 305419896;'),
    (bytes.fromhex('341200fd78563589'), 'r1 = r3 XOR 305419896;'),
    (bytes.fromhex('341200fd785615a9'), 'rMAC = rMAC + r3 * 0.07111111097037792205810546875 (SU);'),
    (bytes.fromhex('341200fd785615ed'), 'rMAC = 305419896 ASHIFT r3 (72bit);'),
    (bytes.fromhex('341215ed'), 'rMAC = 4660 ASHIFT r3 (72bit);'),
    (bytes.fromhex('3412e5ed'), 'rMAC = 4660 ASHIFT r3;'),
    (bytes.fromhex('0806e38d'), 'rMAC2 = r1 LSHIFT 8;'),
    (bytes.fromhex('3e0002a8'), 'if USERDEF rMACB = rMACB + r0 * r1 (SU);'),
    (bytes.fromhex('008002a9'), 'rMACB = rMACB + r0 * 0.5 (SU);'),
    (bytes.fromhex('35a5138f'), 'rMAC = rMAC LSHIFT r1 (72bit), M[I1,4] = r0, r1 = M[I5,4];'),
    (bytes.fromhex('35a5e38f'), 'rMAC = rMAC LSHIFT r1, M[I1,4] = r0, r1 = M[I5,4];'),
    (bytes.fromhex('35a5238b'), 'r0 = r0 XOR r1, M[I1,4] = r0, r1 = M[I5,4];'),
    (bytes.fromhex('00b58e5b'), 'M0 = M0 + FP, M[I1,4] = r1;'),
    (bytes.fromhex('ef001e00'), 'rMAC = rFlags + rFlags;'),
    (bytes.fromhex('e6b58858'), 'if V M0 = M0 + FP, M[I1,M1] = r1;'),
    (bytes.fromhex('3f0007f0'), 'FP = FP + r1;'),
    (bytes.fromhex('3f0003f0'), 'SP = SP + r1;'),
    (bytes.fromhex('3f0017f0'), 'rMAC = FP + r1;'),
    (bytes.fromhex('3f0013f0'), 'rMAC = SP + r1;'),
    (bytes.fromhex('0805e38d'), 'rMAC0 = r1 LSHIFT 8;'),
    (bytes.fromhex('00001cd9'), 'Div = rMAC / r10;'),
    (bytes.fromhex('00001ed9'), 'Div = rMAC / rFlags;'),
    (bytes.fromhex('00001dd9'), 'Div = rMAC / rLink;'),
    (bytes.fromhex('000035d9'), 'Div = r1 / r3;'),
    (bytes.fromhex('006051d8'), 'if EQ r3 = SIGNDET rMAC, r4 = M[I0,M0];'),
    (bytes.fromhex('002000fd0000f001'), 'rMACB = Null + 536870912;'),
    (bytes.fromhex('020050d9'), 'r3 = DivRemainder;'),
    (bytes.fromhex('0000f000'), 'if EQ rMACB = Null + Null;'),
    (bytes.fromhex('0400148d'), 'rMAC = r2 LSHIFT 4 (72bit);'),
    (bytes.fromhex('050800f1'), 'pushm <FP(=SP), r0, r9>;'),
    (bytes.fromhex('050804f1'), 'popm <FP, r0, r9>;'),
    (bytes.fromhex('04002ff1'), 'push r0 + 4;'),
    (bytes.fromhex('0800e28d'), 'rMAC = r0 LSHIFT 8 (MI);'),
    (bytes.fromhex('08001291'), 'rMAC = r0 ASHIFT 8 (72bit);'),
    (bytes.fromhex('0a005315'), 'r3 = M[r1] + 10 + Carry;'),
    (bytes.fromhex('0a005335'), 'r3 = M[r1] - 10 - Borrow;'),
    (bytes.fromhex('0a005389'), 'r3 = r1 XOR 10;'),
    (bytes.fromhex('0000e069'), 'rFlags = I0 - 0;'),
    (bytes.fromhex('0e000000'), 'if USERDEF Null = Null + Null;'),
    (bytes.fromhex('0f000edc'), 'rti;'),
    (bytes.fromhex('0f000ddc'), 'rts;'),
    (bytes.fromhex('0f0002e0'), 'call r0;'),
    (bytes.fromhex('0f000000'), 'Null = Null + Null;'),
    (bytes.fromhex('10000000'), 'if EQ Null = Null + rMAC;'),
    (bytes.fromhex('03000000'), 'if NC Null = Null + Null;'),
    (bytes.fromhex('100000d0'), 'if EQ Null = M[Null + rMAC];'),
    (bytes.fromhex('030000d0'), 'if NC Null = M[Null + Null];'),
    (bytes.fromhex('0e0000f4'), 'if USERDEF Null = MBS[Null + Null];'),
    (bytes.fromhex('05000451'), 'I0 = r2 + 5;'),
    (bytes.fromhex('1f00aef0'), 'M[FP + rMAC] = B0;'),
    (bytes.fromhex('2000518d'), 'r3 = rMAC LSHIFT 32;'),
    (bytes.fromhex('060035d5'), 'M[r3 + 6] = r1;'),
    (bytes.fromhex('22000e51'), 'I0 = FP + 34;'),
    (bytes.fromhex('010040d9'), 'r2 = DivResult;'),
    (bytes.fromhex('00000000'), 'if EQ Null = Null + Null;'),
    (bytes.fromhex('000000d0'), 'if EQ Null = M[Null + Null];'),
    (bytes.fromhex('000000f4'), 'if EQ Null = MBS[Null + Null];'),
    (bytes.fromhex('08000000'), 'if HI Null = Null + Null;'),
    (bytes.fromhex('2a002ff1'), 'push r0 + 42;'),
    (bytes.fromhex('2a0007f1'), 'FP = FP + 42;'),
    (bytes.fromhex('2a0023f1'), 'r0 = SP + 42;'),
    (bytes.fromhex('080000d0'), 'if HI Null = M[Null + Null];'),
    (bytes.fromhex('2f001f8c'), 'rMAC = rMACB LSHIFT r0 (72bit);'),
    (bytes.fromhex('2f00ef90'), 'rMAC = rMACB ASHIFT r0;'),
    (bytes.fromhex('31204246'), 'r2 = r2 + I2, r0 = M[I0,M0], r1 = M[I4,M1];'),
    (bytes.fromhex('3020548c'), 'if EQ r3 = r2 LSHIFT r1, r0 = M[I0,M0];'),
    (bytes.fromhex('314053bf'), 'rMAC = rMAC - r3 * r1 (SS), r2 = M[I0,0], r1 = M[I4,4];'),
    (bytes.fromhex('324053de'), 'rMAC = rMAC - r3 * r1, r0 = r1 + rMACB, r2 = M[I0,M0], r1 = M[I4,M2];'),
    (bytes.fromhex('fb26e0b4'), 'if LT r1 = r1 - Null * rMACB, r0 = r1 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0b000000'), 'if LT Null = Null + Null;'),
    (bytes.fromhex('0b0000f4'), 'if LT Null = MBS[Null + Null];'),
    (bytes.fromhex('0000e0cd'), 'r1 = Null * 0, r0 = r2 - rMACB;'),
    (bytes.fromhex('3f20f48c'), 'rMACB = r2 LSHIFT r1 (72bit), r0 = M[I0,M0];'),
    (bytes.fromhex('4060530c'), 'if EQ r3 = r1 + M[r2] + Carry, r4 = M[I0,M0];'),
    (bytes.fromhex('40605324'), 'if EQ r3 = r1 - r2 - Borrow, r4 = M[I0,M0];'),
    (bytes.fromhex('40205380'), 'if EQ r3 = r1 AND r2, r0 = M[I0,M0];'),
    (bytes.fromhex('41205386'), 'r3 = r3 OR r1, r0 = M[I0,M0], r2 = M[I4,M1];'),
    (bytes.fromhex('407013ac'), 'if EQ rMAC = rMAC + r1 * r2 (SS), r5 = M[I0,M0];'),
    (bytes.fromhex('407063a8'), 'if EQ r4 = r4 + r1 * r2 (SU), r5 = M[I0,M0];'),
    (bytes.fromhex('406053d0'), 'if EQ r3 = M[r1 + r2], r4 = M[I0,M0];'),
    (bytes.fromhex('400053f4'), 'if EQ r3 = MBS[r1 + r2];'),
    (bytes.fromhex('40000000'), 'if EQ Null = Null + r2;'),
    (bytes.fromhex('1b26e0da'), 'rFlags = BLKSIGNDET Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('000800f4'), 'if EQ Null = MBS[I0 + Null];'),
    (bytes.fromhex('4f0034e4'), 'r1 = ABS r2;'),
    (bytes.fromhex('5f0034e4'), 'r1 = MIN r2;'),
    (bytes.fromhex('5f002e50'), 'I2 = FP + r3;'),
    (bytes.fromhex('00002000'), 'if EQ r0 = Null + Null;'),
    (bytes.fromhex('60000000'), 'if EQ Null = Null + r4;'),
    (bytes.fromhex('000020d0'), 'if EQ r0 = M[Null + Null];'),
    (bytes.fromhex('64000000'), 'if NEG Null = Null + r4;'),
    (bytes.fromhex('600000d0'), 'if EQ Null = M[Null + r4];'),
    (bytes.fromhex('000020f4'), 'if EQ r0 = MBS[Null + Null];'),
    (bytes.fromhex('6d0000f5'), 'Null = MBS[Null + 109];'),
    (bytes.fromhex('6f0034e4'), 'r1 = MAX r2;'),
    (bytes.fromhex('700003f0'), 'if EQ SP = SP + r5;'),
    (bytes.fromhex('7160530e'), 'r3 = r3 + M[r1] + Carry, r4 = M[I0,M0], r5 = M[I4,M1];'),
    (bytes.fromhex('71605326'), 'r3 = r3 - r1 - Borrow, r4 = M[I0,M0], r5 = M[I4,M1];'),
    (bytes.fromhex('0000e0d1'), 'rFlags = M[Null + 0];'),
    (bytes.fromhex('7f0034e4'), 'r1 = TWOBITCOUNT r2;'),
    (bytes.fromhex('80000000'), 'if EQ Null = Null + r6;'),
    (bytes.fromhex('800000d0'), 'if EQ Null = M[Null + r6];'),
    (bytes.fromhex('001000f4'), 'if EQ I0 = MBS[Null + Null];'),
    (bytes.fromhex('001000f5'), 'I0 = MBS[Null + 0];'),
    (bytes.fromhex('8f0034e4'), 'r1 = MOD24 r2;'),
    (bytes.fromhex('90000000'), 'if EQ Null = Null + r7;'),
    (bytes.fromhex('900000f4'), 'if EQ Null = MBS[Null + r7];'),
    (bytes.fromhex('9f0034e4'), 'r1 = ONEBITCOUNT r2;'),
    (bytes.fromhex('b1200002'), 'Null = Null + Null, r0 = M[I0,M0], M[I4,M1] = r1;'),
    (bytes.fromhex('0000e0d5'), 'M[Null + 0] = rFlags;'),
    (bytes.fromhex('bf004e54'), 'I4 = FP + M3;'),
    (bytes.fromhex('c1001fe4'), 'if NE rMAC = rMACB - 2;'),
    (bytes.fromhex('000003dc'), 'if EQ jump r1;'),
    (bytes.fromhex('e000518d'), 'r3 = rMAC LSHIFT -32;'),
    (bytes.fromhex('f0000000'), 'if EQ Null = Null + rMACB;'),
    (bytes.fromhex('f00000f4'), 'if EQ Null = MBS[Null + rMACB];'),
    (bytes.fromhex('fb26e00c'), 'if LT rFlags = Null + M[rMACB] + Carry, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e010'), 'if LT rFlags = M[Null] + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e014'), 'if LT rFlags = M[Null] + rMACB + Carry, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e059'), 'L4 = I0 + 0;'),
    (bytes.fromhex('fb26e054'), 'if LT L4 = Null + L5, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e074'), 'if LT L4 = Null - L5, r0 = M[I1,M2];'),
    (bytes.fromhex('00010000'), 'if EQ Null = Null + Null;'),
    (bytes.fromhex('00200000'), 'if EQ Null = Null + Null, r0 = M[I0,M0];'),
    (bytes.fromhex('fb26e044'), 'if LT rFlags = Null + L5, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e064'), 'if LT rFlags = Null - L5, r0 = M[I1,M2];'),
    (bytes.fromhex('002000d0'), 'if EQ Null = M[Null + Null], r0 = M[I0,M0];'),
    (bytes.fromhex('002000f4'), 'if EQ Null = MBU[Null + Null];'),
    (bytes.fromhex('000100f4'), 'if EQ Null = MBS[Null + Null];'),
    (bytes.fromhex('002000f5'), 'Null = MBU[Null + 0];'),
    (bytes.fromhex('0801e291'), 'rMAC = r0 ASHIFT 8 (LO);'),
    (bytes.fromhex('248109f1'), 'I0 = M[SP + 292];'),
    (bytes.fromhex('fb26e0c4'), 'if LT r1 = Null * rMACB, r0 = r1 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('382157aa'), 'rMAC = rMAC + r3 * r5 (SU), r0 = M[I0,M1], r1 = M[I6,M0];'),
    (bytes.fromhex('382157ae'), 'rMAC = rMAC + r3 * r5 (SS), r0 = M[I0,M1], r1 = M[I6,M0];'),
    (bytes.fromhex('382257ab'), 'rMAC = rMAC + r3 * r5 (SU), r0 = M[I0,8], r1 = M[I6,0];'),
    (bytes.fromhex('3b2157af'), 'rMAC = rMAC + r3 * r5 (SS), r0 = M[I0,4], r1 = M[I6,-4];'),
    (bytes.fromhex('0000e0dd'), 'if USERDEF jump 0;'),
    (bytes.fromhex('3f1185f1'), 'SP = SP - 32, popm <I0, I1, I2, I3, I4, I5, M0, L0>;'),
    (bytes.fromhex('400000f4'), 'if EQ Null = MBS[Null + r2];'),
    (bytes.fromhex('1b26e0ea'), 'rMACB = rMACB - r4 * Null, r0 = r2 + rMAC, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('000800f5'), 'Null = MBS[I0 + 0];'),
    (bytes.fromhex('0000a000'), 'if EQ r8 = Null + Null;'),
    (bytes.fromhex('0000a0d0'), 'if EQ r8 = M[Null + Null];'),
    (bytes.fromhex('0000a0f4'), 'if EQ r8 = MBS[Null + Null];'),
    (bytes.fromhex('fb26e048'), 'if LT rFlags = I0 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0c8'), 'if LT r1 = Null * rMACB, r0 = r2 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('736154d3'), 'r3 = M[r3 + r2], r4 = M[I0,4], r5 = M[I4,-4];'),
    (bytes.fromhex('736153db'), 'r3 = BLKSIGNDET r1, r4 = M[I0,4], r5 = M[I4,-4];'),
    (bytes.fromhex('0000e061'), 'rFlags = Null - 0;'),
    (bytes.fromhex('0000e0e1'), 'if USERDEF call 0;'),
    (bytes.fromhex('7c010000'), 'if GT Null = Null + r5;'),
    (bytes.fromhex('1b26e0ee'), 'rMACB = r4 * Null, r0 = r2 + rMAC, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000c000'), 'if EQ r10 = Null + Null;'),
    (bytes.fromhex('0000c0d0'), 'if EQ r10 = M[Null + Null];'),
    (bytes.fromhex('0000c0f4'), 'if EQ r10 = MBS[Null + Null];'),
    (bytes.fromhex('fb26e04c'), 'if LT rFlags = I0 + L5, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0cc'), 'if LT r1 = Null * rMACB, r0 = r2 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e065'), 'rFlags = 0 - Null;'),
    (bytes.fromhex('1b26e0f2'), 'push rFlags, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e000'), 'if EQ rFlags = Null + Null;'),
    (bytes.fromhex('0000e0d0'), 'if EQ rFlags = M[Null + Null];'),
    (bytes.fromhex('0000e0f4'), 'if EQ rFlags = MBS[Null + Null];'),
    (bytes.fromhex('fb26e050'), 'if LT L4 = Null + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0d0'), 'if LT rFlags = M[Null + rMACB], r0 = M[I1,M2];'),
    (bytes.fromhex('00020000'), 'if EQ Null = Null + Null;'),
    (bytes.fromhex('007220f0'), 'if EQ push r0, r5 = M[I0,M2];'),
    (bytes.fromhex('000200d0'), 'if EQ Null = M[Null + Null];'),
    (bytes.fromhex('004000f4'), 'if EQ Null = MHS[Null + Null];'),
    (bytes.fromhex('000200f4'), 'if EQ Null = MBS[Null - Null];'),
    (bytes.fromhex('058230f1'), 'pushm <FP(=SP), r0, r7, rMACB>, SP = SP + 12;'),
    (bytes.fromhex('004000f5'), 'Null = MHS[Null + 0];'),
    (bytes.fromhex('0802e28d'), 'rMAC = r0 LSHIFT 8 (HI);'),
    (bytes.fromhex('00000001'), 'Null = Null + 0;'),
    (bytes.fromhex('000000f5'), 'Null = MBS[Null + 0];'),
    (bytes.fromhex('2b0200f5'), 'Null = MBS[Null + 555];'),
    (bytes.fromhex('31724992'), 'r2 = r2 ASHIFT r7, r5 = M[I0,M2], r1 = M[I4,M1];'),
    (bytes.fromhex('3172f992'), 'rMACB = rMACB ASHIFT r7 (72bit), r5 = M[I0,M2], r1 = M[I4,M1];'),
    (bytes.fromhex('3322499f'), 'r2 = r2 * r7 (int) (sat), r0 = M[I0,8], r1 = M[I4,-4];'),
    (bytes.fromhex('3412f5ed'), 'rMACB = 4660 ASHIFT r3 (72bit);'),
    (bytes.fromhex('337262f3'), 'push DivRemainder, r5 = M[I0,8], r1 = M[I4,-4];'),
    (bytes.fromhex('fb26e0d4'), 'if LT M[Null + rMACB] = rFlags, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e0ed'), 'rMAC = 0 ASHIFT Null;'),
    (bytes.fromhex('3f72549c'), 'r3 = r2 * r1 (int) (sat), r5 = M[I0,M2];'),
    (bytes.fromhex('000020f5'), 'r0 = MBS[Null + 0];'),
    (bytes.fromhex('72bac6a8'), 'if C rMACB = rMACB + r4 * r5, r0 = r2 + rMACB, M[I2,M2] = r1;'),
    (bytes.fromhex('0000e071'), 'L4 = Null - 0;'),
    (bytes.fromhex('0000e0f1'), 'pushm <>, SP = SP + 56;'),
    (bytes.fromhex('341200fd0000e0f1'), 'pushm <>, SP = SP + 56;'),
    (bytes.fromhex('807223e4'), 'if EQ r0 = MOD24 r1, r5 = M[I0,M2];'),
    (bytes.fromhex('00500000'), 'if EQ Null = Null + Null, r3 = M[I0,M0];'),
    (bytes.fromhex('005000d0'), 'if EQ Null = M[Null + Null], r3 = M[I0,M0];'),
    (bytes.fromhex('9a0200f5'), 'Null = MBS[Null + 666];'),
    (bytes.fromhex('0000e075'), 'L4 = 0 - Null;'),
    (bytes.fromhex('0000e0f5'), 'rFlags = MBS[Null + 0];'),
    (bytes.fromhex('0000e079'), 'L4 = I0 - 0;'),
    (bytes.fromhex('006000fd00002001'), 'r0 = Null + 1610612736;'),
    (bytes.fromhex('006000f4'), 'if EQ Null = MHU[Null + Null];'),
    (bytes.fromhex('006000f5'), 'Null = MHU[Null + 0];'),
    (bytes.fromhex('fb26e0e4'), 'if LT rFlags = SE16 Null, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e07d'), 'L4 = 0 - I0;'),
    (bytes.fromhex('0000e0b9'), 'r1 = r1 - Null * 0, r0 = r2 + rMACB;'),
    (bytes.fromhex('1b26e08a'), 'rFlags = rFlags XOR Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000a0f5'), 'r8 = MBS[Null + 0];'),
    (bytes.fromhex('fb26e068'), 'if LT rFlags = I0 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e081'), 'rFlags = Null AND 0;'),
    (bytes.fromhex('1b26e08e'), 'rMAC = rMAC LSHIFT Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000c0f5'), 'r10 = MBS[Null + 0];'),
    (bytes.fromhex('fb26e06c'), 'if LT rFlags = I0 - L5, r0 = M[I1,M2];'),
    (bytes.fromhex('b2230003'), 'Null = Null + Null, r0 = M[I0,-4], M[I4,8] = r1;'),
    (bytes.fromhex('0000e085'), 'rFlags = Null OR 0;'),
    (bytes.fromhex('0000e005'), 'rFlags = Null + 0 + Carry;'),
    (bytes.fromhex('1b26e092'), 'rMAC = rMAC ASHIFT Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e049'), 'rFlags = I0 + 0;'),
    (bytes.fromhex('0000e089'), 'rFlags = Null XOR 0;'),
    (bytes.fromhex('0000e02d'), 'rFlags = Null - M[0] - Borrow;'),
    (bytes.fromhex('0000e06d'), 'rFlags = 0 - I0;'),
    (bytes.fromhex('0000e08d'), 'rMAC = Null LSHIFT 0 (MI);'),
    (bytes.fromhex('0000e0c9'), 'r1 = Null * 0, r0 = r2 + rMACB;'),
    (bytes.fromhex('0000e0e9'), 'rMAC = 0 LSHIFT Null;'),
    (bytes.fromhex('0000e031'), 'rFlags = M[Null] - 0;'),
    (bytes.fromhex('0000e051'), 'L4 = Null + 0;'),
    (bytes.fromhex('e80300f5'), 'Null = MBS[Null + 1000];'),
    (bytes.fromhex('fb26e070'), 'if LT L4 = Null - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0f0'), 'if LT push rFlags, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e009'), 'rFlags = Null + M[0];'),
    (bytes.fromhex('002c8495'), 'r6 = r2 * 0.34375 (frac);'),
    (bytes.fromhex('00800000'), 'if EQ Null = Null + Null;'),
    (bytes.fromhex('00040000'), 'if EQ Null = Null + Null;'),
    (bytes.fromhex('008000d0'), 'if EQ Null = M[Null + Null];'),
    (bytes.fromhex('000400d0'), 'if EQ Null = M[Null + Null];'),
    (bytes.fromhex('008000f4'), 'if EQ Null = M[Null + Null];'),
    (bytes.fromhex('00003000'), 'if EQ r1 = Null + Null;'),
    (bytes.fromhex('00001000'), 'if EQ rMAC = Null + Null;'),
    (bytes.fromhex('0904ff8d'), 'rMACB12 = rMACB LSHIFT 9;'),
    (bytes.fromhex('0000d000'), 'if EQ rLink = Null + Null;'),
    (bytes.fromhex('0000d0d0'), 'if EQ rLink = M[Null + Null];'),
    (bytes.fromhex('0000f0e5'), 'do 0;'),
    (bytes.fromhex('000030d0'), 'if EQ r1 = M[Null + Null];'),
    (bytes.fromhex('000010d0'), 'if EQ rMAC = M[Null + Null];'),
    (bytes.fromhex('0000f0d0'), 'if EQ rMACB = M[Null + Null];'),
    (bytes.fromhex('fb26e02c'), 'if LT rFlags = Null - M[rMACB] - Borrow, r0 = M[I1,M2];'),
    (bytes.fromhex('2004e191'), 'rMAC12 = rMAC ASHIFT 32;'),
    (bytes.fromhex('214402f1'), 'pushm <rMAC2, DivResult, B0, FP>;'),
    (bytes.fromhex('fb26e030'), 'if LT rFlags = M[Null] - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e034'), 'if LT rFlags = M[Null] - rMACB - Borrow, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e038'), 'if LT M[rFlags] = Null - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e03c'), 'if LT M[rFlags] = Null - rMACB - Borrow, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e05c'), 'if LT L4 = I0 + L5, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e07c'), 'if LT L4 = I0 - L5, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e09c'), 'if LT rFlags = Null * rMACB (int) (sat), r0 = M[I1,M2];'),
    (bytes.fromhex('000400f4'), 'if EQ Null = MBS[Null + I0];'),
    (bytes.fromhex('008000f5'), 'Null = M[Null + 0];'),
    (bytes.fromhex('0000e00d'), 'rFlags = Null + M[0] + Carry;'),
    (bytes.fromhex('000010f4'), 'if EQ rMAC = MBS[Null + Null];'),
    (bytes.fromhex('0000e091'), 'rMAC = Null ASHIFT 0 (MI);'),
    (bytes.fromhex('0000e011'), 'rFlags = M[Null] + 0;'),
    (bytes.fromhex('000030f4'), 'if EQ r1 = MBS[Null + Null];'),
    (bytes.fromhex('fb26e0bc'), 'if LT r1 = r1 - Null * rMACB, r0 = r2 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e060'), 'if LT rFlags = Null - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e080'), 'if LT rFlags = Null AND rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0a0'), 'if LT r1 = r1 + Null * rMACB, r0 = r1 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0c0'), 'if LT r1 = Null * rMACB, r0 = r1 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e040'), 'if LT rFlags = Null + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e004'), 'if LT rFlags = Null + rMACB + Carry, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e008'), 'if LT rFlags = Null + M[rMACB], r0 = M[I1,M2];'),
    (bytes.fromhex('0000e095'), 'rFlags = Null * 0 (frac);'),
    (bytes.fromhex('0000e015'), 'rFlags = M[Null] + 0 + Carry;'),
    (bytes.fromhex('00000002'), 'Null = Null + Null;'),
    (bytes.fromhex('000013d9'), 'Div = rMAC / r1;'),
    (bytes.fromhex('0000e099'), 'rFlags = Null * 0 (int);'),
    (bytes.fromhex('0000e019'), 'M[0] = rFlags + Null;'),
    (bytes.fromhex('0005e18d'), 'rMAC0 = rMAC LSHIFT 0;'),
    (bytes.fromhex('000507f1'), 'FP = FP + 1280;'),
    (bytes.fromhex('00a000f4'), 'if EQ MB[Null + Null] = Null;'),
    (bytes.fromhex('00a000f5'), 'MB[Null + 0] = Null;'),
    (bytes.fromhex('0405e48d'), 'rMAC0 = r2 LSHIFT 4;'),
    (bytes.fromhex('0705f38d'), 'rMACB0 = r1 LSHIFT 7;'),
    (bytes.fromhex('fb26e084'), 'if LT rFlags = Null OR rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e09d'), 'rFlags = Null * 0 (int) (sat);'),
    (bytes.fromhex('0000e01d'), 'M[0] = rFlags + Null + Carry;'),
    (bytes.fromhex('40350458'), 'if EQ I0 = I4 + r2, r1 = M[I1,M1];'),
    (bytes.fromhex('1b26e0aa'), 'rMAC = rMAC + rFlags * Null (SU), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e0d9'), 'Div = rFlags / Null;'),
    (bytes.fromhex('fb26e088'), 'if LT rFlags = Null XOR rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e0a1'), 'r1 = r1 + Null * 0, r0 = r1 + rMACB;'),
    (bytes.fromhex('0000e021'), 'rFlags = Null - 0;'),
    (bytes.fromhex('00b00002'), 'Null = Null + Null, M[I0,M0] = r1;'),
    (bytes.fromhex('1b26e0ae'), 'rMAC = rMAC + rFlags * Null (SS), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('95050000'), 'if POS Null = Null + r7;'),
    (bytes.fromhex('010056f0'), 'if NE pop DivResult;'),
    (bytes.fromhex('a145e9a4'), 'if NE r1 = r1 + r7 * r8, r0 = r1 - rMACB, r2 = M[I1,M1];'),
    (bytes.fromhex('fb26e08c'), 'if LT rMAC = Null LSHIFT rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e0a5'), 'r1 = r1 + Null * 0, r0 = r1 - rMACB;'),
    (bytes.fromhex('0000e025'), 'rFlags = Null - 0 - Borrow;'),
    (bytes.fromhex('0000d0f4'), 'if EQ rLink = MBS[Null + Null];'),
    (bytes.fromhex('1b26e0b2'), 'rMAC = rMAC - rFlags * Null (UU), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('fb26e090'), 'if LT rMAC = Null ASHIFT rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e0a9'), 'r1 = r1 + Null * 0, r0 = r2 + rMACB;'),
    (bytes.fromhex('0000e029'), 'rFlags = Null - M[0];'),
    (bytes.fromhex('0000f0f4'), 'if EQ rMACB = MBS[Null + Null];'),
    (bytes.fromhex('0106f391'), 'rMACB2 = r1 ASHIFT 1;'),
    (bytes.fromhex('00c000f4'), 'if EQ MH[Null + Null] = Null;'),
    (bytes.fromhex('00c000f5'), 'MH[Null + 0] = Null;'),
    (bytes.fromhex('1b26e006'), 'rFlags = rFlags + Null + Carry, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('173e00fdf81913a1'), 'rMAC = rMAC + r1 * 0.24254000000655651092529296875 (UU);'),
    (bytes.fromhex('1b26e00a'), 'rFlags = rFlags + M[Null], r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e00e'), 'rFlags = rFlags + M[Null] + Carry, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e05a'), 'L4 = L4 + Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e07a'), 'L4 = L4 - Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e09a'), 'rFlags = rFlags * Null (int), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0b6'), 'rMAC = rMAC - rFlags * Null (US), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('000000d3'), 'Null = M[Null + Null];'),
    (bytes.fromhex('fb26e094'), 'if LT rFlags = Null * rMACB (frac), r0 = M[I1,M2];'),
    (bytes.fromhex('0000e0ad'), 'r1 = r1 + Null * 0, r0 = r2 - rMACB;'),
    (bytes.fromhex('000010f5'), 'rMAC = MBS[Null + 0];'),
    (bytes.fromhex('1b26e0ba'), 'rMAC = rMAC - rFlags * Null (SU), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e0b1'), 'r1 = r1 - Null * 0, r0 = r1 + rMACB;'),
    (bytes.fromhex('000030f5'), 'r1 = MBS[Null + 0];'),
    (bytes.fromhex('1b26e026'), 'rFlags = rFlags - Null - Borrow, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e042'), 'rFlags = FP + Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e062'), 'rFlags = FP - Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e082'), 'rFlags = rFlags AND Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0a2'), 'rMAC = rMAC + rFlags * Null (UU), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0c2'), 'rMAC = rFlags * Null (UU), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0e2'), 'rMAC = r4 * Null, r0 = r2 + rMACB, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e02a'), 'rFlags = rFlags - M[Null], r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e02e'), 'rFlags = rFlags - M[Null] - Borrow, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e035'), 'rFlags = M[Null] - 0 - Borrow;'),
    (bytes.fromhex('0000e0b5'), 'r1 = r1 - Null * 0, r0 = r1 - rMACB;'),
    (bytes.fromhex('1b26e046'), 'rFlags = FP + I0, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e066'), 'rFlags = FP - I0, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e086'), 'rFlags = rFlags OR Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0a6'), 'rMAC = rMAC + rFlags * Null (US), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0c6'), 'rMAC = rFlags * Null (US), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0e6'), 'rMACB = rMACB + r4 * Null, r0 = r2 + rMAC, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e039'), 'M[0] = rFlags - Null;'),
    (bytes.fromhex('fb26e058'), 'if LT L4 = I0 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e078'), 'if LT L4 = I0 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e098'), 'if LT rFlags = Null * rMACB (int), r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0b8'), 'if LT r1 = r1 - Null * rMACB, r0 = r2 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e0d8'), 'if LT rFlags = SIGNDET Null, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e018'), 'if LT M[rFlags] = Null + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e01c'), 'if LT M[rFlags] = Null + rMACB + Carry, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e020'), 'if LT rFlags = Null - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e024'), 'if LT rFlags = Null - rMACB - Borrow, r0 = M[I1,M2];'),
    (bytes.fromhex('fb26e028'), 'if LT rFlags = Null - M[rMACB], r0 = M[I1,M2];'),
    (bytes.fromhex('00e000f4'), 'if EQ M[Null + Null] = Null;'),
    (bytes.fromhex('00e000f5'), 'M[Null + 0] = Null;'),
    (bytes.fromhex('0b1f00fdfc8c13ad'), 'rMAC = rMAC + r1 * 0.24254000000655651092529296875 (SS);'),
    (bytes.fromhex('fb26e0a4'), 'if LT r1 = r1 + Null * rMACB, r0 = r1 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e03d'), 'M[0] = rFlags - Null - Borrow;'),
    (bytes.fromhex('0000e0bd'), 'r1 = r1 - Null * 0, r0 = r2 - rMACB;'),
    (bytes.fromhex('1b26e0ca'), 'rMAC = rFlags * Null (SU), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('fb26e0a8'), 'if LT r1 = r1 + Null * rMACB, r0 = r2 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('0000e041'), 'rFlags = Null + 0;'),
    (bytes.fromhex('0000e0c1'), 'r1 = Null * 0, r0 = r1 + rMACB;'),
    (bytes.fromhex('1b26e0ce'), 'rMAC = rFlags * Null (SS), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('fb26e0ac'), 'if LT r1 = r1 + Null * rMACB, r0 = r2 - rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('1b26e096'), 'rFlags = rFlags * Null (frac), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e05e'), 'L4 = L4 + I0, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e07e'), 'L4 = L4 - I0, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e09e'), 'rFlags = rFlags * Null (int) (sat), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0be'), 'rMAC = rMAC - rFlags * Null (SS), r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0d6'), 'rMAC = rMAC + r4 * Null, r0 = r2 + rMACB, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e0de'), 'rMAC = rMAC - r4 * Null, r0 = r2 + rMACB, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('1b26e022'), 'rFlags = rFlags - Null, r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('0000e0c5'), 'r1 = Null * 0, r0 = r1 - rMACB;'),
    (bytes.fromhex('0000d0f5'), 'rLink = MBS[Null + 0];'),
    (bytes.fromhex('1b26e0d2'), 'rFlags = M[rFlags + Null], r0 = M[I1,M2], rMAC = M[I6,M3];'),
    (bytes.fromhex('d0070000'), 'if EQ Null = Null + rLink;'),
    (bytes.fromhex('fb26e0b0'), 'if LT r1 = r1 - Null * rMACB, r0 = r1 + rMACB, r0 = M[I1,M2];'),
    (bytes.fromhex('fac735f5'), 'MH[r3 + -6] = r1;'),
    (bytes.fromhex('0000f0f5'), 'rMACB = MBS[Null + 0];'),
    (bytes.fromhex('0e4043d4'), 'if USERDEF M[r1 + Null] = r2, r2 = M[I0,M0];'),
    (bytes.fromhex('0e0043d0'), 'if USERDEF r2 = M[r1 + Null];'),
    (bytes.fromhex('0f0043d8'), 'r2 = SIGNDET r1;'),
    (bytes.fromhex('0e0004dc'), 'if USERDEF jump r2;'),
    (bytes.fromhex('8f0054e4'), 'r3 = MOD24 r2;'),
    (bytes.fromhex('2e0043e4'), 'if USERDEF r2 = r1 + 1;'),
    (bytes.fromhex('ae0043e4'), 'if USERDEF r2 = r1 + 2;'),
    (bytes.fromhex('2e0007f0'), 'if USERDEF FP = FP + r0;'),
    (bytes.fromhex('2e0013f0'), 'if USERDEF rMAC = SP + r0;'),
    (bytes.fromhex('3e0043e4'), 'if USERDEF r2 = r1 - 1;'),
    (bytes.fromhex('be0043e4'), 'if USERDEF r2 = r1 + 4;'),
    (bytes.fromhex('ce0043e4'), 'if USERDEF r2 = r1 - 2;'),
    (bytes.fromhex('4f0047e4'), 'r2 = ABS r5;'),
    (bytes.fromhex('5e00348c'), 'if USERDEF r1 = r2 LSHIFT r3;'),
    (bytes.fromhex('5e003494'), 'if USERDEF r1 = r2 * r3 (frac);'),
    (bytes.fromhex('5e00a4ac'), 'if USERDEF r1 = r1 + r2 * r3, r0 = r2 - rMAC;'),
    (bytes.fromhex('5e00e4b4'), 'if USERDEF r1 = r1 - r2 * r3, r0 = r1 - rMACB;'),
    (bytes.fromhex('5e00e4c4'), 'if USERDEF r1 = r2 * r3, r0 = r1 - rMACB;'),
    (bytes.fromhex('5e003484'), 'if USERDEF r1 = r2 OR r3;'),
    (bytes.fromhex('5e003488'), 'if USERDEF r1 = r2 XOR r3;'),
    (bytes.fromhex('de0043e4'), 'if USERDEF r2 = r1 - 4;'),
    (bytes.fromhex('5e003498'), 'if USERDEF r1 = r2 * r3 (int);'),
    (bytes.fromhex('5e00349c'), 'if USERDEF r1 = r2 * r3 (int) (sat);'),
    (bytes.fromhex('5f0048e4'), 'r2 = MIN r6;'),
    (bytes.fromhex('6f004ae4'), 'r2 = MAX r8;'),
    (bytes.fromhex('ef004fe4'), 'r2 = SE8 rMACB;'),
    (bytes.fromhex('ef008de4'), 'r6 = SE8 rLink;'),
    (bytes.fromhex('7f00c2e4'), 'r10 = TWOBITCOUNT r0;'),
    (bytes.fromhex('24a5c6f2'), 'pop B4, M[I1,M1] = r0, r0 = M[I5,M0];'),
    (bytes.fromhex('26a4a2f3'), 'push B0, M[I1,0] = r0, r0 = M[I5,8];'),
    (bytes.fromhex('4e002af0'), 'if USERDEF rMAC0 = M[FP + r2];'),
    (bytes.fromhex('4e001ef0'), 'if USERDEF M[FP + r2] = rMAC1;'),
    (bytes.fromhex('3e002af0'), 'if USERDEF rMAC0 = M[FP + r1];'),
    (bytes.fromhex('26a43223'), 'r1 = r1 - r0, M[I1,0] = r0, r0 = M[I5,8];'),
    (bytes.fromhex('26a4027b'), 'I0 = I0 - r0, M[I1,0] = r0, r0 = M[I5,8];'),
    (bytes.fromhex('26a43227'), 'r1 = r1 - r0 - Borrow, M[I1,0] = r0, r0 = M[I5,8];'),
    (bytes.fromhex('26003283'), 'r1 = r1 AND r0, r0 = M[I5,8];'),
    (bytes.fromhex('26a43207'), 'r1 = r1 + r0 + Carry, M[I1,0] = r0, r0 = M[I5,8];'),
    (bytes.fromhex('26003287'), 'r1 = r1 OR r0, r0 = M[I5,8];'),
    (bytes.fromhex('26003293'), 'r1 = r1 ASHIFT r0, r0 = M[I5,8];'),
    (bytes.fromhex('2600329b'), 'r1 = r1 * r0 (int), r0 = M[I5,8];'),
    (bytes.fromhex('2600329f'), 'r1 = r1 * r0 (int) (sat), r0 = M[I5,8];'),
    (bytes.fromhex('25a4b2e3'), 'rMAC = r1 * r0, r0 = r2 - rMACB, M[I1,M0] = r0, r0 = M[I5,M1];'),
    (bytes.fromhex('27a63497'), 'r1 = r1 * r2 (frac), M[I1,8] = r0, r0 = M[I5,-4];'),
    (bytes.fromhex('27a6c6f3'), 'pop B4, M[I1,8] = r0, r0 = M[I5,-4];'),
    (bytes.fromhex('25a432ca'), 'rMAC = r1 * r0 (SU), M[I1,M0] = r0, r0 = M[I5,M1];'),
    (bytes.fromhex('26a432cb'), 'rMAC = r1 * r0 (SU), M[I1,0] = r0, r0 = M[I5,8];'),
]
